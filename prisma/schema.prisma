// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                     String                   @id @default(cuid())
  name                   String?
  email                  String                   @unique
  emailVerified          Boolean                  @default(false)
  image                  String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  role                   String?                  @default("user")
  banned                 Boolean?                 @default(false)
  banReason              String?
  banExpires             DateTime?
  twoFactorEnabled       Boolean                  @default(false)
  
  // Relations
  accounts               account[]
  sessions               session[]
  verifications          verification[]
  twoFactors             twoFactor[]
}

model session {
  id                     String                   @id @default(cuid())
  expiresAt              DateTime
  token                  String                   @unique
  ipAddress              String?
  userAgent              String?
  userId                 String
  
  // Relations
  user                   user                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model account {
  id                     String                   @id @default(cuid())
  accountId              String
  providerId             String
  userId                 String
  accessToken            String?
  refreshToken           String?
  idToken                String?
  accessTokenExpiresAt   DateTime?
  refreshTokenExpiresAt  DateTime?
  scope                  String?
  password               String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  
  // Relations
  user                   user                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([providerId, accountId])
  @@index([userId])
}

model verification {
  id                     String                   @id @default(cuid())
  identifier             String
  value                  String
  expiresAt              DateTime
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  
  // Relations
  user                   user                     @relation(fields: [identifier], references: [email], onDelete: Cascade)
  
  @@index([identifier])
}

model twoFactor {
  id                     String                   @id @default(cuid())
  secret                 String
  backupCodes            String
  userId                 String
  
  // Relations
  user                   user                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId])
}
