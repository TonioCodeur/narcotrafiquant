
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  role          String          @default("user")
  image         String?
  startDate     DateTime?
  points        Int             @default(0)
  level         Int             @default(0)
  experience    Int             @default(0)
  tracking      Int             @default(0)
  money         Int             @default(10000)
  drugs         Drug[]
  tasks         Task[]
  hideouts      Hideout[]
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("user")
}

model Account {
  accountId             String
  providerId            String
  provider              String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  password              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  scope     String?
  createdAt DateTime
  updatedAt DateTime

  @@id([accountId])
  @@map("account")
}

model Session {
  token     String   @unique
  userId    String
  expiresAt DateTime
  ipAddress String?
  userAgent String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime
  updatedAt DateTime

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Drug {
  id         String   @id @default(cuid())
  name       String
  price      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  drugType   DrugType @relation(fields: [drugTypeId], references: [id])
  drugTypeId String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
}

model DrugType {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  drugs Drug[]
}

model Task {
  id          String   @id @default(cuid())
  name        String
  description String
  points      Int
  experience  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model Hideout {
  id        String   @id @default(cuid())
  name      String
  place     String
  price     Int
  rent      Int
  stockage  Int
  level     Int
  space     Int
  security  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
